Worked with Pacman with only minor changes:

In pacman federateddeployment, change:

MONGO_SERVICE_HOST to match monto service endpoints: SEE BELOW
MONGO_PORT back to default mongo tcp/ip port of 27017
MONGO_USE_SSL to false


Had to change hostnames to match internal endpoints, but with namespace added,

Looks like: service.namespace e.g.

    mongo-svc-a.sku-mongo,mongo-svc-b.sku-mongo,mongo-svc-c.sku-mongo

After changing pacman's endpoints, found pacman still got unnamespaced hosts
out of the MongoDB replicaset, so had to change those hostnames too:

Useful info on changing RS in flight:
    https://docs.mongodb.com/manual/tutorial/change-hostnames-in-a-replica-set/#replica-set-change-hostname-no-downtime

Finally, I had to create a user (blinky:pinky) and a database (pacman) for access to work appropriately:

I found simple instructions here: https://zocada.com/setting-mongodb-users-beginners-guide/

    use pacman
    db.createUser(
      {
        user: "blinky",
        pwd: "pinky",
        roles: [ { role: "readWrite", db: "pacman" } ]
      }
    )

## Adding argocd integration
Holed up in RHSyseng because we can create private repos here

Creating private ssh key for github to allow access by argocd over ssh

### Method for breaking out yaml files with multiple resources
Many charts and other distribution techniques provide a single yaml file with
multiple resources defined. To divide these files by the --- separator, use the Gnu csplit utility:

    csplit --prefix 'prefix-text' --suffix 'suffix-%02d.yaml' \
        combined-resources.yaml '/^---$/' '{*}'

If you have a different set of yaml per cluster, and want to find similarities, it is now easy
with md5sum or any other hashing function:

'''
$ md5sum *.yaml | sort

1812bdf28176a3a1a8da866cb26f7008  e1-2.yaml
1812bdf28176a3a1a8da866cb26f7008  e2-2.yaml
1812bdf28176a3a1a8da866cb26f7008  w2-2.yaml
341ef8c0a6478d240fce855cad62e429  e1-0.yaml
4a66c6dc175949fb97098d5b5fa539f0  w2-4.yaml
6105347ebb9825ac754615ca55ff3b0c  e1-5.yaml
6105347ebb9825ac754615ca55ff3b0c  e2-5.yaml
6105347ebb9825ac754615ca55ff3b0c  w2-5.yaml
7af94f0753aa5e0c65c51a5e6641761d  e1-4.yaml
7dffde783e42f18985c6f954405d82a6  e1-1.yaml
83e8ad3eb1ed107d615169481a6f8c32  e1-3.yaml
83e8ad3eb1ed107d615169481a6f8c32  e2-3.yaml
83e8ad3eb1ed107d615169481a6f8c32  w2-3.yaml
afb947c44d02a107406ad304e4a3acfa  e2-4.yaml
bedc1fb0cde60c3a2252fed90f7ae546  w2-0.yaml
d08d3a7056a019e08c5fdf38973e0fb2  w2-1.yaml
f096e63d540955607213d71eb7801ebd  e2-1.yaml
f9025d7ccde06fd08ef2a5f10b61f365  e2-0.yaml
'''

Here, you can see that the third (2), sixth, and fourth resources are the same between all clusters
and can be combined in base.

Any two (or more) files with the same checksum can simply be added to the `base` directory
of your Kustomize hierarchy. Pulling out the differences in the remaining files may take more work.

For files which are too different (e.g. it isn't worth creating a merge because there aren't enough
common sections) simply add them to the overrides directory for each cluster as a resource in
`kustomizations.yaml`.

To determine how much overlap, use diff or sdiff on two files
